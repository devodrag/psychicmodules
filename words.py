from .. import loader, utils
import aiohttp
from bs4 import BeautifulSoup

@loader.tds
class RandomWords(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ MyMemory —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""

    strings = {
        "name": "RandomWords",
        "no_word": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥!",
        "loading": "‚è≥ –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–æ...",
        "translation_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ MyMemory: {}. –ü—ã—Ç–∞—é—Å—å —á–µ—Ä–µ–∑ Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫...",
        "google_translation_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {}",
        "word_fetch_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {}"
    }

    async def get_random_word(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ MyMemory —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
        async with aiohttp.ClientSession() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ —Å randomword.com
                async with session.get("https://randomword.com/") as response:
                    if response.status != 200:
                        return None, None, self.strings["word_fetch_error"].format("HTTP " + str(response.status))
                    text = await response.text()
                    start = text.find('id="random_word">') + len('id="random_word">')
                    end = text.find('</div>', start)
                    word = text[start:end].strip()

                if not word:
                    return None, None, self.strings["word_fetch_error"].format("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å MyMemory
                translation = None
                try:
                    async with session.get(
                        f"https://api.mymemory.translated.net/get?q={word}&langpair=en|ru"
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            translation = (
                                data.get("responseData", {}).get("translatedText", "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                or "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                            )
                            if translation.lower() == word.lower() or not translation:
                                translation = None
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ MyMemory: {str(e)}")
                    translation = None

                # –ï—Å–ª–∏ MyMemory –Ω–µ –¥–∞–ª –ø–µ—Ä–µ–≤–æ–¥, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
                if not translation:
                    try:
                        headers = {
                            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        }
                        async with session.get(
                            f"https://translate.google.com/m?sl=en&tl=ru&q={word}",
                            headers=headers
                        ) as response:
                            if response.status != 200:
                                return word, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", self.strings["google_translation_error"].format("HTTP " + str(response.status))
                            html = await response.text()
                            soup = BeautifulSoup(html, "html.parser")
                            translation_element = soup.find("div", class_="result-container")
                            translation = translation_element.text.strip() if translation_element else "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                            if translation.lower() == word.lower() or not translation:
                                translation = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {str(e)}")
                        return word, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", self.strings["google_translation_error"].format(str(e))

                return word, translation, None
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
                return None, None, self.strings["word_fetch_error"].format(str(e))

    @loader.command()
    async def randomword(self, message):
        """–í—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        await utils.answer(message, self.strings["loading"])
        word, translation, error = await self.get_random_word()

        if error:
            await utils.answer(message, error)
            return

        if word:
            response = (
                f"üåç <b>–°–ª–æ–≤–æ:</b> {word}\n"
                f"üá∑üá∫ <b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translation}"
            )
            await utils.answer(message, response)
        else:
            await utils.answer(message, self.strings["no_word"])

    async def client_ready(self, client, db):
        """–ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = client